apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: awesome-web2-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: traefik
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - hosts:
      - awesome.allocsoc.net
      secretName: awesome-allocsoc-net-tls
  rules:
    - host: awesome.allocsoc.net
      http:
        paths:
          - path: /api/v1
            pathType: Prefix
            backend:
              service:
                name: awesome-backend-service
                port:
                  number: 8000
          - path: /
            pathType: Prefix
            backend:
              service:
                name: awesome-web2-service
                port:
                  number: 3000
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: awesome-web2
spec:
  replicas: 2
  selector:
    matchLabels:
      app: awesome-web2
  template:
    metadata:
      labels:
        app: awesome-web2
    spec:
      containers:
      - name: web2
        image: harbor.allocsoc.net/awesome-crawler/awesome-web2:952e84f8ec04eec30d9ad5113cda4011fd3e7609
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "http://awesome-backend-service:8000"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: awesome-web2-service
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: awesome-web2